Developing iOS 11 Apps with Swift, Stanford CS193p



Lecture 1, 2

Concentration Demo
1. rename @IBOutlet name of var
2. use Outlet Collections
3. static func xxx()->Int {..} ,
    A static function is a function, even though it's in the class, you can't send it to a instance class. A instance class not understand 		 this message. What understand message is a type class
4. var game = Concentration(numberOfPairsOfCards: (cardButtons.count + 1) / 2)
	Cannot use instance member 'cardButtons' within property initializer; property initializers run before 'self' is available.
	lazy , if you make a var lazy that means it doesn't actually initialize until someone grabs.






Lecture 3
*********************************

enum
enum FastFoodMenuItem {    case hamburger    case fries    case drink    case cookie }
An enum is a value type (like struct), so it is copied as it is passed around.
Each state can (but does not have to) have its own “associated data” ...enum FastFoodMenuItem {    case hamburger(numberOfPatties: Int)    case fries(size: FryOrderSize)    case drink(String, ounces: Int) // the unnamed String is the brand, e.g. “Coke”    case cookie }
In the example above, FryOrderSize would also probably be an enum, for example ...enum FryOrderSize {    case large    case small }

Setting the value of an enum
Just use the name of the type along with the case you want, separated by dot ... 
let menuItem: FastFoodMenuItem = FastFoodMenuItem.hamburger(patties: 2) 
var otherItem = FastFoodMenuItem.cookie
var otherItem: FastFoodMenuItem = .cookie

Checking an enum’s state
switch menuItem {
    case FastFoodMenuItem.hamburger: print(“burger”)
    case .fries: print(“fries”) //It is not necessary to use the fully-expressed FastFoodMenuItem.fries inside the switch 					(since Swift can infer the FastFoodMenuItem part of that)
    //If you don’t want to do anything in a given case, use break ...
    case .drink: break  
    //Associated data is accessed through a switch statement using this let syntax ...
    //retrieves the associated data can have a different name
    case .drink(let brand, let ounces): print(“a \(ounces)oz \(brand)”)
    default: print(“other”)  //You must handle ALL POSSIBLE CASES (although you can default uninteresting cases) ...
    ...
}



An enum can have methods (and computed properties) but no stored properties ...
enum FastFoodMenuItem {      case hamburger(numberOfPatties: Int)      case fries(size: FryOrderSize)      case drink(String, ounces: Int)      case cookie
      func isIncludedInSpecialOrder(number: Int) -> Bool {
		switch self {		    case .hamburger(let pattyCount): return pattyCount == number		    case .fries, .cookie: return true // a drink and cookie in every special order 
		    case .drink(_, let ounces): return ounces == 16 // & 16oz drink of any kind }
	}      var calories: Int { // calculate and return caloric value here } 

      mutating func switchToBeingACookie() {		self = .cookie // this works even if self is a .hamburger, .fries or .drink	} }	//Note that mutating is required because enum is a VALUE TYPE.
}




*********************************

optional
So an Optional is just an enum
It essentially looks like this:
enum Optional<T> { // a generic type, like Array<Element> or Dictionary<Key,Value> 
case nonecase some(<T>) // the some case has associated data of type T }But this type is so important that it has a lot of special syntax that other types don’t have ...


*********************************

Four Essential Data Structure-building Concepts in Swift  class  struct  enum  protocol




classSupports object-oriented designSingle inheritance of both functionality and data (i.e. instance variables)Reference type (classes are stored in the heap and are passed around via pointers)Heap is automatically “kept clean” by Swift (via reference counting, not garbage collection) Examples: ViewController, UIButton, Concentration


strongstrong is “normal” reference countingAs long as anyone, anywhere has a strong pointer to an instance, it will stay in the heapweakweak means “if no one else is interested in this, then neither am I, set me to nil in that case” Because it has to be nil-able, weak only applies to Optional pointers to reference typesA weak pointer will NEVER keep an object in the heapGreat example: outlets (strongly held by the view hierarchy, so outlets can be weak)   unownedunowned means “don’t reference count this; crash if I’m wrong”This is very rarely usedUsually only to break memory cycles between objects (more on that in a little while)




structValue type (structs don’t live in the heap and are passed around by copying them) Very efficient “copy on write” is automatic in SwiftThis copy on write behavior requires you to mark mutating methodsNo inheritance (of data)Mutability controlled via let (e.g. you can’t add elements to an Array assigned by let) Supports functional programming designExamples: Card, Array, Dictionary, String, Character, Int, Double, UInt32




enumUsed for variables that have one of a discrete set of valuesEach option for that discrete value can have “associated data” with itThe associated data is the only storage that an enum can have (no instance variables) Value type (i.e. passed around by copying)Can have methods and computed (only) propertiesExample: we’ll create a PlayingCard struct that uses Rank and Suit enums




Lecture 4
*********************************

protocolA type which is a declaration of functionality onlyNo data storage of any kind (so it doesn’t make sense to say it’s a “value” or “reference” type) Essentially provides multiple inheritance (of functionality only, not storage) in Swift

Any protocol that has optional methods must be marked @objc.And any class that implements an optional protocol must inherit from NSObject. These sorts of protocols are used often in iOS for delegation (more later on this). Except for delegation, a protocol with optional methods is rarely (if ever) used. As you can tell from the @objc designation, it’s mostly for backwards compatibility.


protocol SomeProtocol : InheritedProtocol1, InheritedProtocol2 {      var someProperty: Int { get set }      func aMethod(arg1: Double, anotherArgument: String) -> SomeType      mutating func changeIt()      init(arg: Type)}Anyone that implements SomeProtocol must also implement InheritedProtocol1 and 2 You must specify whether a property is get only or both get and setAny functions that are expected to mutate the receiver should be marked mutating(unless you are going to restrict your protocol to class implementers only with class keyword) You can even specify that implementers must implement a given initializer


Claims of conformance to protocols are listed after the superclass for a class (obviously, enums and structs would not have the superclass part)Any number of protocols can be implemented by a given class, struct or enum

class SomeClass : SuperclassOfSomeClass, SomeProtocol, AnotherProtocol {// implementation of SomeClass here, including ...      required init(...)}In a class, inits must be marked required (or otherwise a subclass might not conform)

extension Something : SomeProtocol {// implementation of SomeProtocol here// no stored properties though }
You are allowed to add protocol conformance via an extension




string
The characters in a StringA String is made up of Unicodes, but there’s also the concept of a Character. A Character is what a human would perceive to be a single lexical character. This is true even if a single Character is made up of multiple Unicodes.


Function Types
Functions are people* too! (* er, types)You can declare a variable (or parameter to a method or whatever) to be of type “function” You’ll declare it with the types of the functions arguments (and return type) includedYou can do this anywhere any other type is allowed

Closures
Often you want to create the function “on the fly” (rather than already-existing like sqrt). You can do this “in line” using a closure.Imagine we had a function that changed the sign of its argument ...func changeSign(operand: Double) -> Double { return -operand }We could use it instead of sqrt ...var operation: (Double) -> Doubleoperation = changeSignlet result = operation(4.0) // result will be -4.0


operation = (operand: Double) -> Double { return -operand }
operation = { (operand: Double) -> Double in return -operand }
operation = { (operand: Double) in return -operand }
operation = { (operand) in return -operand }
operation = { (operand) in -operand }
operation = { -$0 }


Where do we use closures?Array has a method called map which takes a function as an argument.It applies that function to each element of the Array to create and return a new Array.let primes = [2.0, 3.0, 5.0, 7.0, 11.0]let negativePrimes = primes.map({ -$0 }) // [-2.0, -3.0, -5.0, -7.0, -11.0]let invertedPrimes = primes.map() { 1.0/$0 } // [0.5, 0.333, 0.2, etc.]let primeStrings = primes.map { String($0) } // [“2.0”,”3.0”,”5.0”,”7.0”,”11.0”]



Closures are regular types, so they can be put in Arrays, Dictionarys, etc. When this happens, they are stored in the heap (i.e. they are reference types).What is more, they “capture” variables they use from the surrounding code into the heap too. Those captured variables need to stay in the heap as long as the closure stays in the heap.var ltuae = 42operation = { ltuae * $0 } // “captures” the ltuae var because it’s needed for this closure arrayOfOperations.append(operation)// if we later change ltuae, then the next time we evaluate operation it will reflect that// even if we leave the scope (function or whatever) that this code is in!






Lecture 6
*********************************


在自定义的View中画图，draw()
下面两种方法画圆：
override func draw(_ rect: CGRect) {
//        if let context = UIGraphicsGetCurrentContext() {
//            context.addArc(center: CGPoint(x: bounds.midX, y: bounds.midY), radius: 100, startAngle: 0, endAngle: 2*CGFloat.pi, clockwise: true)
//            context.setLineWidth(5.0)
//            UIColor.lightGray.setFill()
//            UIColor.cyan.setStroke()
//            context.strokePath()
//            context.fillPath()
//        }
        
        let path = UIBezierPath()
        path.addArc(withCenter: CGPoint(x: bounds.midX, y: bounds.midY), radius: 100, startAngle: 0, endAngle: 2*CGFloat.pi, clockwise: true)
        path.lineWidth = 5.0;
        UIColor.lightGray.setFill()
        UIColor.cyan.setStroke()
        path.stroke()
        path.fill()
    }
画好之后，如果是竖屏切换为横屏，圆就会压缩，在设置 View的content mode为Redraw后，切换横竖屏就会重新绘制还是圆的。


在设置字体的时候，想要根据手机系统设置的字体大小来改变应用的字体大小的时候需要按照下面来写：
var font = UIFont.preferredFont(forTextStyle: .body).withSize(fontSize)
font = UIFontMetrics(forTextStyle: .body).scaledFont(for: font) 


在画出纸牌后，竖屏切换为横屏，然后再切换回来竖屏，重置label的宽度时有个问题：
private func configureCornerLabel(_ label: UILabel) {

        print("111 - \(label.frame.size)")

        label.attributedText = cornerString
        label.frame.size = CGSize.zero
        label.sizeToFit()
        label.isHidden = !isFaceUp
	
	print("222 - \(label.frame.size)")
}
切换横竖屏时会调用layoutSubviews()，然后调用上面的方法，因为横竖的label的宽度不一样，如果不写 label.frame.size = CGSize.zero  前后打印的size为 111 - (31.0, 64.5)  222 - (31.0, 112.5)，不知为何宽度没变，高度变了



在改变系统的字体大小后立即打开之前运行的应用，字体不会相应改变，可通过下面的系统方法监听重新布局
override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        setNeedsDisplay()
        setNeedsLayout()
    }



这是一个神技能，在xib中直接显示代码的视图 @IBDesignable，在变量上加上@IBInspectable右边栏中就会显示出输入框 修改后就直接体现在视图上，好神奇
@IBDesignable
class PlayingCardView: UIView {
    
    @IBInspectable
    var rank: Int = 12
    @IBInspectable
    var suit: String = "♥️"
    @IBInspectable
    var isFaceUp: Bool = false
。。。。
}



在处理View的手势事件
let pinch = UIPinchGestureRecognizer(target: playingCardView, action: #selector(PlayingCardView.adjustFaceCardScale(byHandlingGestureRecognizedBy:)))
playingCardView.addGestureRecognizer(pinch)





